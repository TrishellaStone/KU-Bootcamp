## Week 5 Homework Submission File: Archiving and Logging Data

Please edit this file by adding the solution commands on the line below the prompt.

Save and submit the completed file for your homework submission.

---

### Step 1: Create, Extract, Compress, and Manage tar Backup Archives

1. Command to **extract** the `TarDocs.tar` archive to the current directory: tar xf TarDocs.tar

2. Command to **create** the `Javaless_Doc.tar` archive from the `TarDocs/` directory, while excluding the `TarDocs/Documents/Java` directory:

tar cvf Javaless_Doc.tar --exclude="/home/sysadmin/TarDocs/Documents/Java" ~/TarDocs

3. Command to ensure `Java/` is not in the new `Javaless_Docs.tar` archive: tar tvf Javaless_Doc.tar | grep -i Documents/Java

**Bonus** 
- Command to create an incremental archive called `logs_backup_tar.gz` with only changed files to `snapshot.file` for the `/var/log` directory:

#### Critical Analysis Question

- Why wouldn't you use the options `-x` and `-c` at the same with `tar`?

---

### Step 2: Create, Manage, and Automate Cron Jobs

1. Cron job for backing up the `/var/log/auth.log` file:

1. cronjob -e
2. Choose 1
3. 0 6 * * 3 tar cvvf /var/log/auth_Backup.tgz y/var/log/auth.log 

---

### Step 3: Write Basic Bash Scripts

1. Brace expansion command to create the four subdirectories: sudo mkdir /home/backups && sudo mkdir /home/backups/{freemem,diskuse,openlist,freedisk}

2. Paste your `system.sh` script edits below:

    ```bash
    #!/bin/bash
out_freemem=/home/backups/freemen/free.mem.txt
out_diskuse=/home/backups/diskuse/disk_usage.txt
out_openlist=/home/backups/openlist/openlist.txt
out_freedisk=/home/backups/freedisk/freedisk.txt

echo -e "Free System Memory \n$(date) \n" > $outfreemem
free -h > ~/backups/freemem/free_mem.txt
echo -e "Disk USage \n$(date) \n" > $out_diskuse
du -h > ~/backups/diskuse/disk_use.txt
echo -e "Open Files \n$(date) \n" >$out_openlist
lsof > ~/backups/openlist/open_list.txt
echo -e "Disk Space Stats \n$(date) \n" > $out_freedisk
df -h > ~/backups/freedisk/free_disk.txt
    
    ```

3. Command to make the `system.sh` script executable:.,dOCTA 
sudo chmod +x system.sh

**Optional**
- Commands to test the script and confirm its execution:
sudo ./system.sh

**Bonus**
- Command to copy `system` to system-wide cron directory:

---

### Step 4: Perform Various Log Filtering Techniques

1. Command to return `journalctl` messages with priorities from emergency to error:

2. Command to check the disk usage of the system journal unit since the most recent boot:sudo journalctl --diskusage -b 0

3. Comand to remove all archived journal files except the most recent two: sudo journalctl --vacuum-files=2

**Bonus** 
- Command to filter all log messages with priority levels between zero and two, and save output to `/home/sysadmin/Priority_High.txt`:
sudo journalctl -p crit >> ~/home/sysadmin/Priority_High.txt

- Command to automate the last command in a daily cronjob:


- Add the edits made to the crontab file below:

    ```bash
    [Your solution cron edits here]
    ```

---

### Step 5. Create Priority-Based Log Files

1. Command to record all mail log messages, except for debug, to `/var/log/mail.log`:


    - Add the edits made to the configuration file below:

    ```bash
    [Your solution edits here]
    ```
**Bonus**

- Command to record all boot log messages, except for info and debug, to `/var/log/boot.log`:

    - Add the edits made to the configuration file below:

    ```bash


---

### Step 6. Manage Log File Sizes
 
1. Run `sudo nano /etc/logrotate.conf` to edit the `logrotate` configuration file. 

    Configure a log rotation scheme that backs up authentication messages to the `/var/log/auth.log`.

    - Add your config file edits below:

    ```bash
 /var/log/auth.loh {
rotate 7
Weekly
notifempty
delaycompression
missingok
compress
endscript }
    ```

---

### Bonus: Check for Policy and File Violations

1. Command to verify `auditd` is active:

2. Command to set number of retained logs and maximum log file size:

    - Add the edits made to the configuration file below:

    ```bash
    [Your solution edits here]
    ```

3. Command using `auditd` to set rules for `/etc/shadow`, `/etc/passwd` and `/var/log/auth.log`:


    - Add the edits made to the `rules` file below:

    ```bash
    [Your solution edits here]
    ```

4. Command to restart `auditd`:

5. Command to list all `auditd` rules:

6. Command to produce an audit report:

7. Create a user with `sudo useradd attacker` and produce an audit report that lists account modifications:

8. Command to use `auditd` to watch `/var/log/cron`:

9. Command to verify `auditd` rules:

---
Â© 2020 Trilogy Education Services, a 2U, Inc. brand. All Rights Reserved.
